name: CI Pipeline with Docker & SonarQube

on:
  push:
    branches: [main, master, develop, tasks/**]
  pull_request:
    branches: [main, master, develop, tasks/**]

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: UserService
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
          echo "PostgreSQL failed to start in time"
          exit 1

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
              echo "Redis is ready!"
              exit 0
            fi
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          done
          echo "Redis failed to start in time"
          exit 1

      - name: Run Liquibase migrations
        run: |
          mvn liquibase:update -B \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/UserService \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=postgres

      - name: Run Tests with Coverage
        run: |
          mvn clean verify -B \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/UserService \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=postgres \
            -Dspring.data.redis.host=localhost \
            -Dspring.data.redis.port=6379

      - name: Build Docker Image
        run: docker build -t user-service:latest .

      - name: SonarQube Scan
        if: success() && github.event_name == 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn sonar:sonar -B \
            -Dsonar.projectKey=InnoUserService \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/site/jacoco/

      - name: Upload Docker Image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "Would push Docker image to registry here"
