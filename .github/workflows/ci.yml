name: CI InnoUserService

on:
  push:
    branches:
      - main
      - tasks/**

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: UserService
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 17052007
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d UserService"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
      

      redis:
        image: redis:8
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/UserService
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 17052007
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: ci
      LIQUIBASE_ENABLED: true
      SHOW_SQL: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            nc -z postgres 5432 && echo "Postgres is up!" && break
            echo "Waiting for Postgres..."
            sleep 5
          done

      - name: Run Liquibase migrations
        run: |
          mvn liquibase:update \
            -Dliquibase.url=jdbc:postgresql://postgres:5432/UserService \
            -Dliquibase.username=postgres \
            -Dliquibase.password=17052007
      

      - name: Build and run tests
        run: mvn clean test verify -Dspring.profiles.active=ci

  code-analysis:
    name: Code Analysis (SonarQube)
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run tests with coverage
        run: mvn clean test verify -Dspring.profiles.active=ci

      - name: Run SonarQube analysis
        run: |
          mvn sonar:sonar \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=kaimentalityy_inno-user-service \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
