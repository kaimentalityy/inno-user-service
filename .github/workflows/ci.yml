name: CI Pipeline with Docker & SonarQube

on:
  push:
    branches: [main, master, develop, tasks/**]
  pull_request:
    branches: [main, master, develop, tasks/**]

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: UserService
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y redis-tools postgresql-client

      - name: Wait for services
        run: |
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          # Wait for Redis
          until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"

      - name: Run Liquibase migrations
        run: |
          mvn liquibase:update -B \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/UserService \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=postgres

      - name: Run Tests with Coverage
        run: |
          mvn clean verify -B \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/UserService \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=postgres \
            -Dspring.data.redis.host=localhost \
            -Dspring.data.redis.port=6379 \
            -Djacoco.skip=true

      - name: Build Docker Image
        run: docker build -t user-service:latest .

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn sonar:sonar -B \
            -Dsonar.projectKey=InnoUserService \
            -Dsonar.organization=kaimentalityy \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.sourceEncoding=UTF-8

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/site/jacoco/

      - name: Show Test Summary
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            echo "Unit tests completed"
          else
            echo "No unit test results found"
          fi
          
          if [ -d target/site/jacoco ]; then
            echo "Coverage report generated"
          else
            echo "No coverage report found"
          fi